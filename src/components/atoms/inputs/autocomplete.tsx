import { Autocomplete as MuiAutocompleteBase } from '@mui/material';

interface AutoCompleteProps {
  options: unknown[];
  renderInput: () => React.ReactNode;

  autoComplete?: boolean;
  autoHighlight?: boolean;
  autoSelect?: boolean;
  blurOnSelect?: 'mouse' | 'touch' | boolean;
  ChipProps?: object;
  classes?: object;
  clearIcon?: React.ReactNode;
  clearOnBlur?: boolean;
  clearOnEscape?: boolean;
  clearText?: string;
  closeText?: string;
  componentsProps?: object;
  defaultValue?: unknown;
  disableClearable?: boolean;
  disableCloseOnSelect?: boolean;
  disabled?: boolean;
  disabledItemsFocusable?: boolean;
  disableListWrap?: boolean;
  disablePortal?: boolean;
  // filterOptions?: () => void;
  filterSelectedOptions?: boolean;
  forcePopupIcon?: 'auto' | boolean;
  freeSolo?: boolean;
  fullWidth?: boolean;
  getLimitTagsText?: () => React.ReactNode;
  // getOptionDisabled?: () => void;
  getOptionKey?: () => string | number;
  getOptionLabel?: () => string;
  groupBy?: () => string;
  handleHomeEndKeys?: boolean;
  id?: string;
  includeInputInList?: boolean;
  inputValue?: string;
  isOptionEqualToValue?: () => boolean;
  limitTags?: number;
  loading?: boolean;
  loadingText?: React.ReactNode;
  multiple?: boolean;
  noOptionsText?: React.ReactNode;
  onChange?: () => void;
  onClose?: () => void;
  onHighlightChange?: () => void;
  onInputChange?: () => void;
  onOpen?: () => void;
  open?: boolean;
  openOnFocus?: boolean;
  openText?: string;
  popupIcon?: React.ReactNode;
  readOnly?: boolean;
  renderGroup?: () => React.ReactNode;
  renderOption?: () => React.ReactNode;
  renderTags?: () => React.ReactNode;
  renderValue?: () => React.ReactNode;
  selectOnFocus?: boolean;
  size?: 'small' | 'medium';
  slotProps?: object;
  slots?: object;
  // sx?: unknown;
  value?: unknown;
}
export const MuiAutocomplete: React.FC<AutoCompleteProps> = (props) => {
  const { ...restProps } = props;
  return <MuiAutocompleteBase {...restProps}></MuiAutocompleteBase>;
};
